"use strict";

// Какое будет выведено значение:  let x = 5; alert( x++ );  - будет равно 5, так как сначала в браузер выведется 5Б потом +1, то есть 6

// Чему равно такое выражение: [ ] + false - null + true ? - ответ Nan

// console.log(typeof([] + false)); // "false"

// console.log([] + false - null + true); 

// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ? Ответ 2

// let y = 1; 
// let x = y = 2; Все считается справа на лево. 
// alert(x);

// Чему равна сумма [ ] + 1 + 2? ответ 12 потому что данные перевелись в строку и последовательно записались 1 и 2

// console.log([] + 1 + 2);

// Что выведет этот код: alert( "1"[0] )? ответ 1

// alert( "1"[0] );

// Чему равно 2 && 1 && null && 0 && undefined ? ответ - Null потому что И всегда запинается на лжи (Null)


// console.log(2 && 1 && false && 0 && undefined);

// Есть ли разница между выражениями? !!( a && b ) и (a && b)? Ответ False, потому что !! переводятцифры в булиновое значение

// console.log(!!( 1 && 2 ) === (1 && 2));

// Что выведет этот код: alert( null || 2 && 3 || 4 ); ? Ответ 3 потому что здесь сработает приоритет И перед или. Для понимания процесса нужно смотреть таблицу приоритетов оператора JS

// console.log(alert( null || 2 && 3 || 4 ));


// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ? Ответ False потому что хоть числа и ровны, но объекты а и б разные сами по себе

// const a = [1, 2, 3]; 
// const b = [1, 2, 3]; 
// console.log(a == b);

// Что выведет этот код: alert( +"Infinity" ); ? Ответ слово Infinity но это будет тип данных число так как впереди стоит плюс 

// console.log(alert( +"Infinity" ));

// Верно ли сравнение: "Ёжик" > "яблоко"? Ответ False потому что это код Unicod нужно смотреть в таблице

// console.log("Ёжик" > "яблоко");

// Чему равно 0 || "" || 2 || undefined || true || falsе ? Ответ 2 потому что или || запинается на правде ведь 0 и строка это ложь, а 2 это правда, поэтому запнется на 2

// console.log( 0 || "" || 2 || undefined || true || falsе );












